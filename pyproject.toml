[project]
name = "classio"
version = "1.3.1"
description = "IO tools for python classes."
authors = [{ name = "Zach Kurtz", email = "zkurtz@gmail.com" }]
readme = "README.md"
requires-python = ">=3.10"
dependencies = [
  "dummio >=1.9.1",
  "packio >=0.1.0",
]

[dependency-groups]
dev = [
  "pre-commit >=3.8.0",
  "pyright >=1.1.378",
  "ruff >=0.6.3",
  "pytest >=8.3.2",
  "bump-my-version>=0.32.0", # for onnx
]
onnx = [
    "onnx>=1.17.0",
    "protobuf>=5.29.3",
    "scikit-learn>=1.5.2",
    "skl2onnx>=1.18.0",
]
pandas = [
    "fastparquet>=2024.11.0",
    "pandas>=2.2.3",
    "pandahandler>=0.5.4",
    "pyarrow>=19.0.1",
]
pydantic = [
    "pydantic>=2.10.2",
]
mashumaro = [
    "mashumaro>=3.15.0",
    "pyyaml>=6.0.0",
]
yaml = [
    "ruamel-yaml>=0.18.10",
]

[project.urls]
Source = "https://github.com/zkurtz/classio"

[tool.uv]
package = true

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.sdist]
include = ["classio"]

[tool.hatch.build.targets.wheel]
packages = ["classio"]

[tool.ruff]
line-length = 120

[tool.ruff.lint]
select = [
  # ruff defaults:
  "E4", "E7", "E9", "F",
  "I", # flake8-import-order
  "TID", # flake8-tidy-imports
  "D", # google-style docstrings
]
ignore = [
  "D202", # would require one blank line after the last section of a multi-line docstring
  "D203", # would require one blank line at start of class docstring
  "D213", # would require multi-line docstring to start with a hard return
  "D401", # would require imperative mood in docstring
  "D413", # would put blank line at end of each multiline docstring
]

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["D104"] # would require module-level documentation
"test_*.py" = ["D"]

[tool.pyright]
include = ["classio", "tests"]

[tool.pytest.ini_options]
testpaths = ["tests"]

[tool.bumpversion]
current_version = "1.3.1"
parse = "(?P<major>\\d+)\\.(?P<minor>\\d+)\\.(?P<patch>\\d+)"
serialize = ["{major}.{minor}.{patch}"]
search = "{current_version}"
replace = "{new_version}"
regex = false
ignore_missing_version = false
ignore_missing_files = false
tag = false
sign_tags = false
tag_name = "v{new_version}"
tag_message = "Bump version: {current_version} → {new_version}"
allow_dirty = false
commit = true
message = "Bump version: {current_version} → {new_version}"
moveable_tags = []
commit_args = "--no-verify"
setup_hooks = []
pre_commit_hooks = []
post_commit_hooks = []

[[tool.bumpversion.files]]
filename = "pyproject.toml"
